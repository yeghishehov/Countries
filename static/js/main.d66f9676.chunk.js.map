{"version":3,"sources":["serviceWorker.js","Components/Input/Input.js","Components/Countries/Countries.js","index.js"],"names":["Boolean","window","location","hostname","match","StylizedInput","withStyles","root","color","borderBottomColor","borderColor","TextField","Input","props","onInputChange","event","setState","inputValue","target","value","onEnter","key","onInputClick","state","this","inputNode","focus","className","id","label","onChange","onKeyDown","e","ref","node","Component","Countries","fetchCountries","countryName","fetch","then","res","json","status","Error","countries","isEmpty","length","isLoading","errorText","catch","err","message","searchCountry","Grid","container","direction","justify","alignItems","map","country","Card","name","CardContent","Typography","variant","component","gutterBottom","capital","population","CardMedia","image","flag","title","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d66f9676.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport './input.css';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst stylesForInput = {\r\n    root: {\r\n      '& label.Mui-focused': {color: 'green'},\r\n      '& .MuiInput-underline:after': {borderBottomColor: 'green'},\r\n      '& .MuiOutlinedInput-root': {'& fieldset': {borderColor: 'red'},\r\n                                   '&:hover fieldset': {borderColor: 'yellow'},\r\n                                   '&.Mui-focused fieldset': {borderColor: 'green'}\r\n                                   }\r\n    }\r\n};\r\n\r\n\r\nconst StylizedInput = withStyles(stylesForInput)(TextField);\r\n\r\n\r\n\r\nexport default class Input extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputValue : \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.inputNode.focus();\r\n    }\r\n\r\n    onInputChange = event => {\r\n        this.setState({inputValue: event.target.value})\r\n    };\r\n\r\n    onEnter = event => {\r\n        if (event.key === \"Enter\") {\r\n            this.props.onInputClick(this.state.inputValue);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <StylizedInput\r\n                    id=\"custom-css-standard-input\"\r\n                    label=\"Country name: \"\r\n                    onChange={this.onInputChange}\r\n                    onKeyDown={e => this.onEnter(e)}\r\n                    ref={node => this.inputNode = node}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './countries.css';\r\nimport Input from '../Input/Input';\r\nimport { Grid, CardMedia, CardContent, Typography, Card } from '@material-ui/core';\r\n\r\nexport default class Countries extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isEmpty: false,\r\n            isLoading: false,\r\n            errorText: \"\",\r\n            countries: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading: true});\r\n    \r\n        this.fetchCountries();\r\n      }\r\n\r\n      fetchCountries = (countryName = \"\") => {\r\n        if (countryName) {\r\n          fetch(`https://restcountries.eu/rest/v2/name/${countryName}`)\r\n            .then(res => res.json())\r\n            .then((res) => {\r\n              if (res.status === 404) {\r\n                throw new Error('No Data')\r\n              }\r\n              return res;\r\n            })\r\n            .then(res =>\r\n                this.setState({\r\n                    countries: res,\r\n                    isEmpty: res.length === 0,\r\n                    isLoading: false,\r\n                    errorText: \"\"\r\n                })\r\n            )\r\n            .catch(err => \r\n                this.setState({\r\n                    isLoading: false, \r\n                    errorText: err.message, \r\n                    countries: []\r\n                })\r\n            );\r\n        } else {\r\n          fetch('https://restcountries.eu/rest/v2/all')\r\n            .then(res => res.json())\r\n            .then(res => \r\n                this.setState({\r\n                    countries: res, \r\n                    isEmpty: res.length === 0, \r\n                    isLoading: false\r\n                })\r\n            )\r\n            .catch(err => \r\n                this.setState({\r\n                    isLoading: false, \r\n                    errorText: err.message\r\n                })\r\n            );\r\n        }\r\n      };\r\n      \r\n      searchCountry = (countryName) => {\r\n        this.setState({isLoading: true});\r\n    \r\n        this.fetchCountries(countryName);\r\n      };\r\n\r\n    render() {\r\n        const {isEmpty, isLoading, errorText, countries} = this.state;\r\n\r\n        return (\r\n            <div className='main'> \r\n                <Input onInputClick={this.searchCountry} />\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                >                \r\n                    {errorText  \r\n                    ? <p>{errorText}</p>\r\n                    : isEmpty\r\n                        ? <p>No Data</p>\r\n                        : isLoading\r\n                            ? <p>Loading ...</p>\r\n                            : countries.map(country =>                                    \r\n                                <Card key={country.name} className=\"cardStyle\">\r\n                                    <CardContent>\r\n                                        <Typography variant=\"h5\" component=\"h2\" gutterBottom color=\"primary\">\r\n                                            {country.name}\r\n                                        </Typography>\r\n                                        <Typography variant=\"h6\"  gutterBottom color=\"textSecondary\">\r\n                                            {country.capital}\r\n                                        </Typography>\r\n                                        <Typography variant=\"body2\" component=\"p\">\r\n                                            Population: {country.population}\r\n                                        </Typography>\r\n                                        <CardMedia\r\n                                            className='flag'\r\n                                            image={country.flag}\r\n                                            title=\"Country flag\"\r\n                                        />\r\n                                    </CardContent>\r\n                                </Card>                                    \r\n                            )\r\n\r\n                    }\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }      \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Countries from './Components/Countries/Countries';\n\n\nReactDOM.render(<Countries />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}